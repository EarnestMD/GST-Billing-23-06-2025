//In all the places axios localhost was replaced with api
eg.
 axios.get("http://localhost:8081/items/"+itemId)
		api.get("/items/"+itemId)

Of course! I've reviewed your project, and I've identified the core reason your frontend is not receiving data from the backend. It's a two-part issue involving how your frontend makes API calls.

The Core Problem
Missing Authentication Token: Your Spring Boot backend is secured with JWT. When your frontend components (like ProductList, ProductEntry, etc.) make API calls to fetch data, they are not including the JWT authentication token that was received during login. The backend sees these requests as unauthenticated and correctly denies them with a 401 Unauthorized error.
Incorrect API URLs: Many of your components are making requests to URLs like http://localhost:8081/items/.... Based on your backend AuthController, all API endpoints are prefixed with /api. The correct URL should be http://localhost:8081/api/items/....
The Solution: Centralized and Authenticated API Calls
The standard and most effective way to solve this is to create a single, configured axios instance that automatically adds the Authorization header with the JWT token to every request. We will then update all your components to use this new instance.

Here are the step-by-step changes to fix your application:

Step 1: Create a Central API Service
First, create a new file in your src/services directory to handle all API communication. This service will set up an axios interceptor to attach the JWT token to every request.

import axios from 'axios';
import authService from './authService';

const api = axios.create({
    baseURL: "http://localhost:8081/api",
    headers: {
        "Content-Type": "application/json",
    },
});

api.interceptors.request.use(
    (config) => {
        const user = authService.getCurrentUser();
        if (user && user.token) {
            // Spring Security expects the header in this format
            config.headers['Authorization'] = 'Bearer ' + user.token;
        }
        return config;
    },
    (error) => {
        return Promise.reject(error);
    }
);

export default api;

Step 2: Update Components to Use the New API Service
Now, we need to modify all components that make API calls to use our new api service instead of the generic axios, and also correct the URL paths.

File: ProductEntry.js

import React,{Component} from 'react';
import {Card,Form,Button,Col} from 'react-bootstrap';
import MyToast from './MyToast';
import api from '../services/api';
import ProductList from './ProductList';
import {FontAwesomeIcon} from '@fortawesome/react-fontawesome';
import {faSave,faPlusSquare,faUndo} from '@fortawesome/free-solid-svg-icons';

export default class ProductEntry extends Component {
	
	initialState = {
			id:'', product_code:'', product_name:'', product_price:'', product_gst:''
	};
	
	constructor(props){
		super(props);
		this.state = {
			...this.initialState,
			show : false
		};
		this.itemChange = this.itemChange.bind(this);
		this.submitItem = this.submitItem.bind(this);
	}
	
	componentDidMount(){
		const itemId = +this.props.match.params.id;
		if(itemId){
			this.findItemById(itemId);
		}
	}
	
	findItemById = (itemId) => {
		api.get("/items/"+itemId)
			.then(response => {
			if(response.data != null){
				this.setState({
					id: response.data.id,
					product_code: response.data.product_code,
					product_name: response.data.product_name,
					product_price: response.data.product_price,
					product_gst: response.data.product_gst
				});
			}
		}).catch((error) => {
			console.error("Error - "+error);
		});
	}
	
	resetItem = () => {
		this.setState(() => this.initialState)
	};
	
	submitItem = event => {
		event.preventDefault();
		
		const item = {
			product_code: this.state.product_code,
			product_name: this.state.product_name,
			product_price: this.state.product_price,
			product_gst: this.state.product_gst
		};
		
		api.post("/items",item)
			.then(response => {
			if(response.data != null){
				this.setState(this.initialState);
				this.setState({"show":true, "method":"post"});
				setTimeout(() => this.setState({"show":false}),3000);
			}else{
				this.setState({"show":false});					
			}
		});
	};
	
	itemChange = event => {
		this.setState({
			[event.target.name]:event.target.value
		});
	};
	
	render(){
		
		const {product_code,product_name,product_price,product_gst} = this.state;
		
		return(
			<div>
				<div style={{"display":this.state.show ? "block" : "none"}}>
					<MyToast show = {this.state.show} message={"Item Saved Successfully"} type={"success"}/>				
				</div>
					<Card className={"border border-dark bg-dark text-white"}>
						<Card.Header><FontAwesomeIcon icon={faPlusSquare}/>Add New Item
						</Card.Header>
						<Form onReset={this.resetItem} onSubmit={this.submitItem} id="itemFormId">
							<Card.Body>
								<Form.Row>
									  <Form.Group as={Col} controlId="formGridTitle">
									    <Form.Label>Product code</Form.Label>
									    <Form.Control required autoComplete="off"
									    	type="text" name="product_code"
									    	value={product_code} onChange={this.itemChange}
									    	className={"bg-dark text-white"}
									    	placeholder="Enter Product code" />
									  </Form.Group>
									  <Form.Group as={Col} controlId="formGridTitle">
									  	<Form.Label>Product name</Form.Label>
									    <Form.Control required autoComplete="off"
									    	type="text" name="product_name"
									    	value={product_name} onChange={this.itemChange}
									    	className={"bg-dark text-white"}
									    	placeholder="Enter Product name" />
									  </Form.Group>
									  <Form.Group as={Col} controlId="formGridTitle">
									    <Form.Label>Price</Form.Label>
									    <Form.Control required autoComplete="off"
									    	type="text" name="product_price"
									    	value={product_price} onChange={this.itemChange}
									    	className={"bg-dark text-white"}
									    	placeholder="Enter Product price" />
									  </Form.Group>
									  <Form.Group as={Col} controlId="formGridTitle">
									    <Form.Label>GST%</Form.Label>
									    <Form.Control required autoComplete="off"
									    	type="text" name="product_gst"
									    	value={product_gst} onChange={this.itemChange}
									    	className={"bg-dark text-white"}
									    	placeholder="Enter GST%" />
									  </Form.Group>
								  </Form.Row>
							   </Card.Body>
							   <Card.Footer style={{"textAlign":"right"}}>
								<Button size="sm" variant="success" type="submit">   
									<FontAwesomeIcon icon={faSave}/>Save
							    </Button>{' '}
								<Button size="sm" variant="info" type="reset">
									<FontAwesomeIcon icon={faUndo}/>Reset
								</Button>
							</Card.Footer>
							</Form>
						</Card>
						<div>
							<ProductList/>
						</div>
			</div>
		);
	}
}


product  js


import React,{Component} from 'react';
import {Card,Form,Button,Col} from 'react-bootstrap';
import MyToast from './MyToast';
import api from '../services/api';
import {FontAwesomeIcon} from '@fortawesome/react-fontawesome';
import {faSave,faList,faEdit} from '@fortawesome/free-solid-svg-icons';

export default class Product extends Component {
	
	constructor(props){
		super(props);
		this.state = {
			show : false
		};
		this.itemChange = this.itemChange.bind(this);
		this.updateItem = this.updateItem.bind(this);
	}
	
	componentDidMount(){
		const itemId = +this.props.match.params.id;
		if(itemId){
			this.findItemById(itemId);
		}
	}
	
	findItemById = (itemId) => {
		api.get("/items/"+itemId)
			.then(response => {
			if(response.data != null){
				this.setState({
					id: response.data.id,
					product_code: response.data.product_code,
					product_name: response.data.product_name,
					product_price: response.data.product_price,
					product_gst: response.data.product_gst
				});
			}
		}).catch((error) => {
			console.error("Error - "+error);
		});
	}
	
	updateItem = event => {
		event.preventDefault();
		
		const item = {
			id: this.state.id,
			product_code: this.state.product_code,
			product_name: this.state.product_name,
			product_price: this.state.product_price,
			product_gst: this.state.product_gst
		};
		
		api.put("/items",item)
		.then(response => {
			if(response.data != null){
				this.setState(this.initialState);
				this.setState({"show":true,"method":"put"});
				setTimeout(() => this.setState({"show":false}),3000);
				setTimeout(() => this.productEntry(),2000);
			}else{
				this.setState({"show":false});					
			}
		});
	};
	
	itemChange = event => {
		this.setState({
			[event.target.name]:event.target.value
		});
	};
	
	productEntry = () => {
		return this.props.history.push("/add");
	};
	
	render(){
		
		const {product_code,product_name,product_price,product_gst} = this.state;
		
		return(
			<div>
				<div style={{"display":this.state.show ? "block" : "none"}}>
					<MyToast show = {this.state.show} message={"Item Updated Successfully"} type={"success"}/>				
				</div>
					<Card className={"border border-dark bg-dark text-white"}>
						<Card.Header><FontAwesomeIcon icon={faEdit}/>Update Item
						</Card.Header>
						<Form onSubmit={this.updateItem} id="Id">
							<Card.Body>
								<Form.Row>
									  <Form.Group as={Col} controlId="formGridTitle">
									    <Form.Label>Product code</Form.Label>
									    <Form.Control required autoComplete="off"
									    	type="text" name="product_code"
									    	value={product_code} onChange={this.itemChange}
									    	className={"bg-dark text-white"}
									    	placeholder="Enter Product code" />
									  </Form.Group>
									  <Form.Group as={Col} controlId="formGridTitle">
									  	<Form.Label>Product name</Form.Label>
									    <Form.Control required autoComplete="off"
									    	type="text" name="product_name"
									    	value={product_name} onChange={this.itemChange}
									    	className={"bg-dark text-white"}
									    	placeholder="Enter Product name" />
									  </Form.Group>
									  <Form.Group as={Col} controlId="formGridTitle">
									    <Form.Label>Price</Form.Label>
									    <Form.Control required autoComplete="off"
									    	type="text" name="product_price"
									    	value={product_price} onChange={this.itemChange}
									    	className={"bg-dark text-white"}
									    	placeholder="Enter Product price" />
									  </Form.Group>
									  <Form.Group as={Col} controlId="formGridTitle">
									    <Form.Label>GST%</Form.Label>
									    <Form.Control required autoComplete="off"
									    	type="text" name="product_gst"
									    	value={product_gst} onChange={this.itemChange}
									    	className={"bg-dark text-white"}
									    	placeholder="Enter GST%" />
									  </Form.Group>
								  </Form.Row>
							   </Card.Body>
							   <Card.Footer style={{"textAlign":"right"}}>
								<Button size="sm" variant="success" type="submit">
									<FontAwesomeIcon icon={faSave}/>Update 
							    </Button>{' '}
								<Button size="sm" variant="info" type="button" onClick={this.productEntry.bind()}>
									<FontAwesomeIcon icon={faList}/>Product List
								</Button>
							</Card.Footer>
							</Form>
						</Card>
			</div>
		);
	}
}

ProductList.js


import React,{Component} from 'react';
import {Card,Table,InputGroup,FormControl,ButtonGroup,Button} from 'react-bootstrap';
import {FontAwesomeIcon} from '@fortawesome/react-fontawesome';
import {faList,faEdit,faTrash,faStepBackward,faFastBackward,faStepForward,faFastForward} from '@fortawesome/free-solid-svg-icons';
import api from '../services/api';
import MyToast from './MyToast';
import {Link} from 'react-router-dom';
import './Style.css';

export default class ProductList extends Component {
	
	constructor(props){
		super(props);
		this.state = {
				items : [],
				currentPage: 1,
				itemsPerPage: 5
		};
	}
	
	componentDidMount(){
		this.findAllItems();
	}
	
	findAllItems(){
		api.get("/items")
			.then(response => response.data)
			.then((data) => {
				this.setState({items: data});
			});
	};
	
	deleteItem = (itemId) => {
		api.delete("/items/"+itemId)
			.then(response => {
				if(response.data != null){
					this.setState({"show":true});
					setTimeout(() => this.setState({"show":false}),3000);					
					this.setState({
						items: this.state.items.filter(item => item.id !== itemId)
					});
				}else{
					this.setState({"show":false});					
				}
			});
	};
	
	changePage = event => {
		this.setState({
			[event.target.name]: parseInt(event.target.value)
		});
	};
	
	firstPage = () => {
		if(this.state.currentPage > 1) {
			this.setState({
				currentPage: 1
			});
		}
	};
	
	prevPage = () => {
		if(this.state.currentPage > 1) {
			this.setState({
				currentPage: this.state.currentPage - 1
			});
		}
	};
	
	lastPage = () => {
		if(this.state.currentPage < Math.ceil(this.state.items.length / this.state.itemsPerPage)) {
			this.setState({
				currentPage: Math.ceil(this.state.items.length / this.state.itemsPerPage)
			});
		}
	};
	
	nextPage = () => {
		if(this.state.currentPage < Math.ceil(this.state.items.length / this.state.itemsPerPage)) {
			this.setState({
				currentPage: this.state.currentPage + 1
			});
		}
	};
	
	render(){
		
		const {items,currentPage,itemsPerPage} = this.state;
		const lastIndex = currentPage * itemsPerPage;
		const firstIndex = lastIndex - itemsPerPage;
		const currentItems = items.slice(firstIndex,lastIndex);
		const totalPages = Math.ceil(items.length / itemsPerPage);
		
		return(
			<div>
				<div style={{"display":this.state.show ? "block" : "none"}}>
					<MyToast show = {this.state.show} message={"Item Deleted Successfully"} type={"danger"}/>
				</div>
				<Card className={"border border-dark bg-dark text-white"}>
				<Card.Header>
						<FontAwesomeIcon icon={faList}/>Product List					
				</Card.Header>
				<Card.Body>
					<Table bordered hover striped variant="dark">
					<thead>
					    <tr>
					      <th>Product Code</th>
					      <th>Product Name</th>
					      <th>Price</th>
					      <th>GST%</th>
					      <th>Actions</th>
					    </tr>
					</thead>
					<tbody>
					   {
						   this.state.items.length === 0 ?
						  <tr align="center">
					      	<td colSpan="5">No Items Available</td>
					      </tr> :
					    	currentItems.map((item)=>(
					      <tr key={item.id}>
					      	<td>{item.product_code}</td>					      							      	
					      	<td>{item.product_name}</td>
					      	<td>{item.product_price}</td>
					      	<td>{item.product_gst}</td>					      	
					      	<td>
					      		<ButtonGroup>					      			
					      			<Link to={"edit/"+item.id} className="btn btn-sm btn-outline-primary"><FontAwesomeIcon icon={faEdit}/></Link>{' '}						      			
					      			<Button size="sm" variant="outline-danger" onClick={this.deleteItem.bind(this,item.id)}><FontAwesomeIcon icon={faTrash}/></Button>
					      		</ButtonGroup>
					      	</td>
					      </tr>
					      ))
					  } 
					  </tbody>
					 </Table>
					</Card.Body>
					{items.length > 0 ?
						    <Card.Footer>
							    <div style={{"float":"left"}}>
							    	Showing Page {currentPage} of {totalPages}
							    </div>
							    <div style={{"float":"right"}}>
						    		<InputGroup size="sm">
						    			<InputGroup.Prepend>
						    				<Button type="button" variant="outline-info" disabled={currentPage===1?true:false}
						    					onClick={this.firstPage}>
						    					<FontAwesomeIcon icon={faFastBackward}/>First
						    				</Button>
			                                <Button type="button" variant="outline-info" disabled={currentPage===1?true:false}
			                                	onClick={this.prevPage}>
			                                	<FontAwesomeIcon icon={faStepBackward}/>Prev
						    				</Button>
						    			</InputGroup.Prepend>
						    			<FormControl className={"page-num bg-dark"} name="currentPage" value={currentPage}
						    				onChange={this.changePage}/>
						    			<InputGroup.Append>
							    			<Button type="button" variant="outline-info" disabled={currentPage===totalPages?true:false}
							    				onClick={this.nextPage}>
							    				<FontAwesomeIcon icon={faStepForward}/>Next
						    				</Button>
			                                <Button type="button" variant="outline-info" disabled={currentPage===totalPages?true:false}
			                                	onClick={this.lastPage}>
			                                	<FontAwesomeIcon icon={faFastForward}/>Last
						    				</Button>
						    			</InputGroup.Append>
						    		</InputGroup>
							    </div>
						    </Card.Footer> : null
				            }
				    </Card>
			</div>
		);
	}
}

SearchItem.js

import React,{Component} from 'react';
import {Card,Table,InputGroup,FormControl,ButtonGroup,Button} from 'react-bootstrap';
import {FontAwesomeIcon} from '@fortawesome/react-fontawesome';
import {faSearch,faPlus,faTimes} from '@fortawesome/free-solid-svg-icons';
import api from '../services/api';

export default class SearchItem extends Component{
	
	constructor(props){
		super(props);
		this.state = {
				items : [],
				search : '',
				quantity: 0
		};
		this.searchData = this.searchData.bind(this);
	}
	
	componentDidMount(){
		this.findAllItems();
	}
	
	findAllItems(){
		api.get("/items")
			.then(response => response.data)
			.then((data) => {
				this.setState({items: data});
			});
	};
	
	searchChange = event => {
		this.setState({
			[event.target.name] : event.target.value
		});
	};
	
	cancelSearch = () => {
		this.setState({"search":''});
	};
	
	searchData = () => {
		api.get("/items/search/"+this.state.search)
			.then(response => response.data)
			.then((data) => {
				this.setState({
						items: data
					});
			});
	};
	
	addItem = (id,product_code,product_name,product_price,product_gst,quantity) => {
		const selectedItem = {
				id:id,
				product_code:product_code,
				product_name:product_name,
				product_price:product_price,
				product_gst:product_gst,
				quantity: quantity
				
		};
		this.props.addItem(selectedItem);
	}
	
	render(){
		
		const {search} = this.state;
		let quantity = this.state.quantity;
		const filteredProduct = this.state.items.filter(
				(item) => {
					return item.product_name.toLowerCase().indexOf(this.state.search) !== -1||item.product_code.indexOf(this.state.search) !== -1;
				}
		);
		
		return(
				<div>
						<Card className={"border border-dark bg-dark text-white"}>
						<Card.Header>
							<div style={{"float":"right"}}>
								<InputGroup size="sm">
									<FormControl placeholder="Search" name="search" value={search} autoComplete="off" 
										className={"info-border bg-dark text-white"}
										onChange={this.searchChange}/>
									<InputGroup.Append>
										<Button size="sm" variant="outline-info" type="button" onClick={this.searchData}>
											<FontAwesomeIcon icon={faSearch}/>
										</Button>
                                        <Button size="sm" variant="outline-danger" type="button" onClick={this.cancelSearch}>
                                        	<FontAwesomeIcon icon={faTimes}/>
										</Button>
									</InputGroup.Append>
								</InputGroup>
							</div>
						</Card.Header>
						<Card.Body>
							<Table bordered hover striped variant="dark">
							<thead>
						    <tr>
						      <th>Product Code</th>
						      <th>Product Name</th>
						      <th>Price</th>
						      <th>GST</th>
						      <th>Action</th>
						    </tr>
						  </thead>
						  <tbody>
						  {
							  search === '' ?
							  <tr align="center">
							  		<td colSpan="5"></td>
						      </tr> :
							  filteredProduct.map((item)=>(
						      <tr key={item.id}>
						      	<td>{item.product_code}</td>
						      	<td>{item.product_name}</td>
						      	<td>{item.product_price}</td>
						      	<td>{item.product_gst}</td>
						      	<td>
						      	<ButtonGroup>
						      		<Button size="sm" variant="success" onClick={this.addItem.bind(
						      				this,item.id,item.product_code,item.product_name,item.product_price,item.product_gst,quantity)}>
						      			<FontAwesomeIcon icon={faPlus}/>Add
						      		</Button>
							    </ButtonGroup>
							 </td>
						      </tr>
						      ))
						  } 
						  </tbody>
							</Table>
						</Card.Body>
					</Card>
				</div>
				
		);
	}
}

billing.js

import React, { Component } from 'react';
import SearchItem from './SearchItem';
import api from '../services/api';
import MyToast from './MyToast';

import { Card, Table, Button } from 'react-bootstrap';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faList, faPrint, faUndo, faSave } from '@fortawesome/free-solid-svg-icons';

export default class Billing extends Component {

	constructor(props) {
		super(props);
		this.state = {
			cart: [],
			notClicked: true,
			showToast: false,
			toastMessage: '',
			toastType: ''
		};
	}

	handleAddItem = (selectedItem) => {
		this.setState({
			// Use spread syntax to avoid direct state mutation
			cart: [...this.state.cart, selectedItem],
			notClicked: false
		});
	}

	updateQuantity = (index, val) => {
		this.setState({
			cart: this.state.cart.map((item, i) => (
				i === index ? { ...item, quantity: val } : item
			))
		})
	}

	handleSave = () => {
		const { cart } = this.state;
		if (cart.length === 0) {
			alert("Cannot save an empty bill. Please add items to the cart.");
			return;
		}

		// Map frontend state (snake_case) to backend DTO (camelCase)
		const billData = cart.map(item => ({
			productCode: item.product_code,
			productName: item.product_name,
			productPrice: item.product_price,
			productGst: item.product_gst,
			quantity: item.quantity
		}));

		api.post("/bills/SaveBill", billData)
			.then(response => {
				console.log("Bill saved successfully:", response.data);
				this.setState({ showToast: true, toastMessage: "Bill Saved Successfully!", toastType: "success" });
			})
			.catch(error => {
				console.error("Error saving bill:", error);
				this.setState({ showToast: true, toastMessage: "Could not save the bill.", toastType: "danger" });
			});
	}

	handlePrint = () => {
		const { cart } = this.state;
		if (cart.length === 0) {
			alert("Cannot print an empty bill. Please add items to the cart.");
			return;
		}

		// This now only triggers the browser's print dialog
		window.print();
	}

	handleReset = () => {
		this.setState({
			cart: [],
			notClicked: true
		});
	}

	render() {

		return (

			<div>
				<MyToast
					show={this.state.showToast}
					message={this.state.toastMessage}
					type={this.state.toastType}
					onClose={() => this.setState({ showToast: false })}
				/>
				<div className="no-print">
					<SearchItem
						addItem={this.handleAddItem}
					/>
				</div>
				<Card className={"border border-dark bg-dark text-white printable-area"}>
					<Card.Header>
						<div className="print-header">
							<h4 style={{ textAlign: 'center' }}>Your Store Name</h4>
							<p style={{ textAlign: 'center', margin: 0 }}>123 Main Street, Anytown, USA</p>
							<p style={{ textAlign: 'center', margin: 0 }}>Date: {new Date().toLocaleDateString()}</p>
						</div>
						<div className="no-print"><FontAwesomeIcon icon={faList} /> Billing List</div>
					</Card.Header>
					<Card.Body>
						<Table bordered hover striped variant="dark">
							<thead>
								<tr>
									<th>Product Code</th>
									<th>Product Name</th>
									<th>Price</th>
									<th>GST%</th>
									<th>Quantity</th>
									<th>Subtotal</th>
								</tr>
							</thead>
							<tbody>
								{
									(this.state.notClicked) ?
										<tr align="center">
											<td colSpan="6"></td>
										</tr> :
										this.state.cart.map((item, i) => (
											<tr key={i}>
												<td>{item.product_code}</td>
												<td>{item.product_name}</td>
												<td>{item.product_price}</td>
												<td>{item.product_gst}</td>
												<td>
													<input
														type="text"
														value={item.quantity} className={"info-border bg-dark text-white"}
														onChange={e => this.updateQuantity(i, parseInt(e.target.value) || 0)}
													/>
												</td>
												<td>{calculateSubtotal(item).toFixed(2)}</td>
											</tr>
										))}
							</tbody>
							<tfoot>
								<tr>
									<th colSpan="5" align="center"><h3>Total</h3></th>
									<th><h3><Total cart={this.state.cart} /></h3></th>
								</tr>
							</tfoot>
						</Table>


					</Card.Body>
					<Card.Footer style={{ "textAlign": "right" }} className="no-print">
						<Button size="sm" variant="success" type="button" onClick={this.handleSave}>
							<FontAwesomeIcon icon={faSave} />Save
						</Button>{' '}
						<Button size="sm" variant="info" type="button" onClick={this.handlePrint}>
							<FontAwesomeIcon icon={faPrint} />Print
						</Button>{' '}
						<Button size="sm" variant="danger" type="button" onClick={this.handleReset}>
							<FontAwesomeIcon icon={faUndo} />Reset
						</Button>
					</Card.Footer>

				</Card>
			</div>
		)
	}
}

const calculateSubtotal = (item) => {
	if (!item || !item.product_price || !item.quantity) {
		return 0;
	}
	const price = Number(item.product_price);
	const quantity = Number(item.quantity);
	const gst = Number(item.product_gst) || 0;

	const subtotal = price * quantity * (1 + gst / 100);
	return Number(subtotal.toFixed(2));
};

const Total = ({ cart }) => {
	const total = cart.reduce((sum, item) => sum + calculateSubtotal(item), 0);
	return total.toFixed(2);
};

